// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Member Stack - AFSBP 1`] = `
Object {
  "Conditions": Object {
    "AFSBPEC21EnableEC21ConditionA4D0F59B": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AFSBPEC21Active",
        },
        "Available",
      ],
    },
    "AFSBPLambda1EnableLambda1Condition4E1A1855": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AFSBPLambda1Active",
        },
        "Available",
      ],
    },
    "AFSBPRDS1EnableRDS1ConditionB553606B": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AFSBPRDS1Active",
        },
        "Available",
      ],
    },
  },
  "Description": "test;",
  "Parameters": Object {
    "AFSBPEC21Active": Object {
      "AllowedValues": Array [
        "Available",
        "NOT Available",
      ],
      "Default": "Available",
      "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control EC2.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account.",
      "Type": "String",
    },
    "AFSBPLambda1Active": Object {
      "AllowedValues": Array [
        "Available",
        "NOT Available",
      ],
      "Default": "Available",
      "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Lambda.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account.",
      "Type": "String",
    },
    "AFSBPRDS1Active": Object {
      "AllowedValues": Array [
        "Available",
        "NOT Available",
      ],
      "Default": "Available",
      "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account.",
      "Type": "String",
    },
    "SecHubAdminAccount": Object {
      "AllowedPattern": "\\\\d{12}",
      "Description": "Admin account number",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AFSBPEC21AutomationDocument39E9DD5A": Object {
      "Condition": "AFSBPEC21EnableEC21ConditionA4D0F59B",
      "Properties": Object {
        "Content": Object {
          "assumeRole": "{{ AutomationAssumeRole }}",
          "description": "### Document Name - SHARR-AFSBP_1.0.0_EC2.1
## What does this document do?
This document changes all public EC2 snapshots to private

## Input Parameters
* Finding: (Required) Security Hub finding details JSON
* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

## Documentation Links
* [AFSBP EC2.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-1)
",
          "mainSteps": Array [
            Object {
              "action": "aws:executeScript",
              "inputs": Object {
                "Handler": "parse_event",
                "InputPayload": Object {
                  "Finding": "{{Finding}}",
                  "expected_control_id": "EC2.1",
                  "parse_id_pattern": "",
                  "resource_index": 2,
                },
                "Runtime": "python3.7",
                "Script": "#!/usr/bin/python
###############################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.         #
#                                                                             #
#  Licensed under the Apache License Version 2.0 (the \\"License\\"). You may not #
#  use this file except in compliance with the License. A copy of the License #
#  is located at                                                              #
#                                                                             #
#      http://www.apache.org/licenses/LICENSE-2.0/                            #
#                                                                             #
#  or in the \\"license\\" file accompanying this file. This file is distributed  #
#  on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express #
#  or implied. See the License for the specific language governing permis-    #
#  sions and limitations under the License.                                   #
###############################################################################
import re

def get_control_id_from_arn(finding_id_arn):
    check_finding_id = re.match(
        '^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d):\\\\\\\\d{12}:subscription/aws-foundational-security-best-practices/v/1\\\\\\\\.0\\\\\\\\.0/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
        finding_id_arn
    )
    if check_finding_id:
        control_id = check_finding_id.group(1)
        return control_id
    else:
        exit(f'ERROR: Finding Id is invalid: {finding_id_arn}')

def parse_event(event, context):
    expected_control_id = event['expected_control_id']
    parse_id_pattern = event['parse_id_pattern']
    resource_id_matches = []
    finding = event['Finding']
    testmode = bool('testmode' in finding)

    finding_id = finding['Id']
        
    account_id = finding.get('AwsAccountId', '')
    if not re.match('^\\\\\\\\d{12}$', account_id):
        exit(f'ERROR: AwsAccountId is invalid: {account_id}')

    control_id = get_control_id_from_arn(finding['Id'])

    # ControlId present and valid
    if not control_id:
        exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

    # ControlId is the expected value
    if control_id not in expected_control_id:
        exit(f'ERROR: Control Id from input ({control_id}) does not match {str(expected_control_id)}')

    # ProductArn present and valid
    product_arn = finding['ProductArn']
    if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d)::product/aws/securityhub$', product_arn):
        exit(f'ERROR: ProductArn is invalid: {product_arn}')

    resource = finding['Resources'][0]

    # Details
    details = finding['Resources'][0].get('Details', {})

    # Regex match Id to get remediation-specific identifier
    identifier_raw = finding['Resources'][0]['Id']
    resource_id = identifier_raw

    if parse_id_pattern:
        identifier_match = re.match(
            parse_id_pattern,
            identifier_raw
        )

        if identifier_match:
            for group in range(1, len(identifier_match.groups())+1):
                resource_id_matches.append(identifier_match.group(group))
            resource_id = identifier_match.group(event.get('resource_index', 1))
        else:
            exit(f'ERROR: Invalid resource Id {identifier_raw}')   

    if not resource_id:
        exit('ERROR: Resource Id is missing from the finding json Resources (Id)')

    affected_object = {'Type': resource['Type'], 'Id': resource_id, 'OutputKey': 'Remediation.Output'}
    return {
        \\"account_id\\": account_id,
        \\"resource_id\\": resource_id, 
        \\"finding_id\\": finding_id, 
        \\"control_id\\": control_id,
        \\"product_arn\\": product_arn, 
        \\"object\\": affected_object,
        \\"matches\\": resource_id_matches,
        \\"details\\": details,
        \\"testmode\\": testmode,
        \\"resource\\": resource
    }",
              },
              "isEnd": false,
              "name": "ParseInput",
              "outputs": Array [
                Object {
                  "Name": "FindingId",
                  "Selector": "$.Payload.finding_id",
                  "Type": "String",
                },
                Object {
                  "Name": "ProductArn",
                  "Selector": "$.Payload.product_arn",
                  "Type": "String",
                },
                Object {
                  "Name": "AffectedObject",
                  "Selector": "$.Payload.object",
                  "Type": "StringMap",
                },
                Object {
                  "Name": "AccountId",
                  "Selector": "$.Payload.account_id",
                  "Type": "String",
                },
                Object {
                  "Name": "TestMode",
                  "Selector": "$.Payload.testmode",
                  "Type": "Boolean",
                },
              ],
            },
            Object {
              "action": "aws:executeAutomation",
              "inputs": Object {
                "DocumentName": "SHARR-MakeEBSSnapshotsPrivate",
                "RuntimeParameters": Object {
                  "AccountId": "{{ParseInput.AccountId}}",
                  "AutomationAssumeRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-MakeEBSSnapshotsPrivate",
                  "TestMode": "{{ParseInput.TestMode}}",
                },
              },
              "isEnd": false,
              "name": "Remediation",
            },
            Object {
              "action": "aws:executeAwsApi",
              "description": "Update finding",
              "inputs": Object {
                "Api": "BatchUpdateFindings",
                "FindingIdentifiers": Array [
                  Object {
                    "Id": "{{ParseInput.FindingId}}",
                    "ProductArn": "{{ParseInput.ProductArn}}",
                  },
                ],
                "Note": Object {
                  "Text": "EBS Snapshot modified to private",
                  "UpdatedBy": "SHARR-AFSBP_1.0.0_EC2.1",
                },
                "Service": "securityhub",
                "Workflow": Object {
                  "Status": "RESOLVED",
                },
              },
              "isEnd": true,
              "name": "UpdateFinding",
            },
          ],
          "outputs": Array [
            "Remediation.Output",
            "ParseInput.AffectedObject",
          ],
          "parameters": Object {
            "AutomationAssumeRole": Object {
              "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role/[\\\\w+=,.@-]+",
              "default": "",
              "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
              "type": "String",
            },
            "Finding": Object {
              "description": "The input from Step function for EC2.1 finding",
              "type": "StringMap",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentType": "Automation",
        "Name": "SHARR-AFSBP_1.0.0_EC2.1",
      },
      "Type": "AWS::SSM::Document",
    },
    "AFSBPLambda1AutomationDocumentB7954EC2": Object {
      "Condition": "AFSBPLambda1EnableLambda1Condition4E1A1855",
      "Properties": Object {
        "Content": Object {
          "assumeRole": "{{ AutomationAssumeRole }}",
          "description": "### Document Name - SHARR-AFSBP_1.0.0_Lambda.1 

## What does this document do?
This document removes the public resource policy. A public resource policy
contains a principal \\"*\\" or AWS: \\"*\\", which allows public access to the 
function. The remediation is to remove the SID of the public policy.

## Input Parameters
* Finding: (Required) Security Hub finding details JSON
* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

## Documentation Links
* [AFSBP Lambda.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-lambda-1)
",
          "mainSteps": Array [
            Object {
              "action": "aws:executeScript",
              "inputs": Object {
                "Handler": "parse_event",
                "InputPayload": Object {
                  "Finding": "{{Finding}}",
                  "expected_control_id": "Lambda.1",
                  "parse_id_pattern": "^arn:(?:aws|aws-us-gov|aws-cn):lambda:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\d):\\\\d{12}:function:([a-zA-Z0-9\\\\-_]{1,64})$",
                },
                "Runtime": "python3.7",
                "Script": "#!/usr/bin/python
###############################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.         #
#                                                                             #
#  Licensed under the Apache License Version 2.0 (the \\"License\\"). You may not #
#  use this file except in compliance with the License. A copy of the License #
#  is located at                                                              #
#                                                                             #
#      http://www.apache.org/licenses/LICENSE-2.0/                            #
#                                                                             #
#  or in the \\"license\\" file accompanying this file. This file is distributed  #
#  on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express #
#  or implied. See the License for the specific language governing permis-    #
#  sions and limitations under the License.                                   #
###############################################################################
import re

def get_control_id_from_arn(finding_id_arn):
    check_finding_id = re.match(
        '^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d):\\\\\\\\d{12}:subscription/aws-foundational-security-best-practices/v/1\\\\\\\\.0\\\\\\\\.0/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
        finding_id_arn
    )
    if check_finding_id:
        control_id = check_finding_id.group(1)
        return control_id
    else:
        exit(f'ERROR: Finding Id is invalid: {finding_id_arn}')

def parse_event(event, context):
    expected_control_id = event['expected_control_id']
    parse_id_pattern = event['parse_id_pattern']
    resource_id_matches = []
    finding = event['Finding']
    testmode = bool('testmode' in finding)

    finding_id = finding['Id']
        
    account_id = finding.get('AwsAccountId', '')
    if not re.match('^\\\\\\\\d{12}$', account_id):
        exit(f'ERROR: AwsAccountId is invalid: {account_id}')

    control_id = get_control_id_from_arn(finding['Id'])

    # ControlId present and valid
    if not control_id:
        exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

    # ControlId is the expected value
    if control_id not in expected_control_id:
        exit(f'ERROR: Control Id from input ({control_id}) does not match {str(expected_control_id)}')

    # ProductArn present and valid
    product_arn = finding['ProductArn']
    if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d)::product/aws/securityhub$', product_arn):
        exit(f'ERROR: ProductArn is invalid: {product_arn}')

    resource = finding['Resources'][0]

    # Details
    details = finding['Resources'][0].get('Details', {})

    # Regex match Id to get remediation-specific identifier
    identifier_raw = finding['Resources'][0]['Id']
    resource_id = identifier_raw

    if parse_id_pattern:
        identifier_match = re.match(
            parse_id_pattern,
            identifier_raw
        )

        if identifier_match:
            for group in range(1, len(identifier_match.groups())+1):
                resource_id_matches.append(identifier_match.group(group))
            resource_id = identifier_match.group(event.get('resource_index', 1))
        else:
            exit(f'ERROR: Invalid resource Id {identifier_raw}')   

    if not resource_id:
        exit('ERROR: Resource Id is missing from the finding json Resources (Id)')

    affected_object = {'Type': resource['Type'], 'Id': resource_id, 'OutputKey': 'Remediation.Output'}
    return {
        \\"account_id\\": account_id,
        \\"resource_id\\": resource_id, 
        \\"finding_id\\": finding_id, 
        \\"control_id\\": control_id,
        \\"product_arn\\": product_arn, 
        \\"object\\": affected_object,
        \\"matches\\": resource_id_matches,
        \\"details\\": details,
        \\"testmode\\": testmode,
        \\"resource\\": resource
    }",
              },
              "name": "ParseInput",
              "outputs": Array [
                Object {
                  "Name": "FindingId",
                  "Selector": "$.Payload.finding_id",
                  "Type": "String",
                },
                Object {
                  "Name": "ProductArn",
                  "Selector": "$.Payload.product_arn",
                  "Type": "String",
                },
                Object {
                  "Name": "AffectedObject",
                  "Selector": "$.Payload.object",
                  "Type": "StringMap",
                },
                Object {
                  "Name": "FunctionName",
                  "Selector": "$.Payload.resource_id",
                  "Type": "String",
                },
              ],
            },
            Object {
              "action": "aws:executeAutomation",
              "inputs": Object {
                "DocumentName": "SHARR-RemoveLambdaPublicAccess",
                "RuntimeParameters": Object {
                  "AutomationAssumeRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-RemoveLambdaPublicAccess",
                  "FunctionName": "{{ ParseInput.FunctionName }}",
                },
              },
              "isEnd": false,
              "name": "Remediation",
            },
            Object {
              "action": "aws:executeAwsApi",
              "description": "Update finding",
              "inputs": Object {
                "Api": "BatchUpdateFindings",
                "FindingIdentifiers": Array [
                  Object {
                    "Id": "{{ParseInput.FindingId}}",
                    "ProductArn": "{{ParseInput.ProductArn}}",
                  },
                ],
                "Note": Object {
                  "Text": "Lamdba {{ParseInput.FunctionName}} policy updated to remove public access",
                  "UpdatedBy": "SHARR-AFSBP_1.0.0_Lambda.1",
                },
                "Service": "securityhub",
                "Workflow": Object {
                  "Status": "RESOLVED",
                },
              },
              "isEnd": true,
              "name": "UpdateFinding",
            },
          ],
          "outputs": Array [
            "Remediation.Output",
            "ParseInput.AffectedObject",
          ],
          "parameters": Object {
            "AutomationAssumeRole": Object {
              "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role/[\\\\w+=,.@-]+",
              "default": "",
              "description": "The ARN of the role that allows Automation to perform the actions on your behalf.",
              "type": "String",
            },
            "Finding": Object {
              "description": "The input from Step function for the finding",
              "type": "StringMap",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentType": "Automation",
        "Name": "SHARR-AFSBP_1.0.0_Lambda.1",
      },
      "Type": "AWS::SSM::Document",
    },
    "AFSBPRDS1AutomationDocumentF363990A": Object {
      "Condition": "AFSBPRDS1EnableRDS1ConditionB553606B",
      "Properties": Object {
        "Content": Object {
          "assumeRole": "{{ AutomationAssumeRole }}",
          "description": "### Document Name - SHARR-AFSBP_1.0.0_RDS.1
## What does this document do?
This document changes public RDS snapshot to private

## Input Parameters
* Finding: (Required) Security Hub finding details JSON
* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

## Documentation Links
* [AFSBP RDS.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-1)
",
          "mainSteps": Array [
            Object {
              "action": "aws:executeScript",
              "inputs": Object {
                "Handler": "parse_event",
                "InputPayload": Object {
                  "Finding": "{{Finding}}",
                  "expected_control_id": "RDS.1",
                  "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):rds:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\d):\\\\d{12}:(cluster-snapshot|snapshot):([a-zA-Z](?:[0-9a-zA-Z]+[-]{1})*[0-9a-zA-Z]{1,})$",
                  "resource_index": 2,
                },
                "Runtime": "python3.7",
                "Script": "#!/usr/bin/python
###############################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.         #
#                                                                             #
#  Licensed under the Apache License Version 2.0 (the \\"License\\"). You may not #
#  use this file except in compliance with the License. A copy of the License #
#  is located at                                                              #
#                                                                             #
#      http://www.apache.org/licenses/LICENSE-2.0/                            #
#                                                                             #
#  or in the \\"license\\" file accompanying this file. This file is distributed  #
#  on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express #
#  or implied. See the License for the specific language governing permis-    #
#  sions and limitations under the License.                                   #
###############################################################################
import re

def get_control_id_from_arn(finding_id_arn):
    check_finding_id = re.match(
        '^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d):\\\\\\\\d{12}:subscription/aws-foundational-security-best-practices/v/1\\\\\\\\.0\\\\\\\\.0/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
        finding_id_arn
    )
    if check_finding_id:
        control_id = check_finding_id.group(1)
        return control_id
    else:
        exit(f'ERROR: Finding Id is invalid: {finding_id_arn}')

def parse_event(event, context):
    expected_control_id = event['expected_control_id']
    parse_id_pattern = event['parse_id_pattern']
    resource_id_matches = []
    finding = event['Finding']
    testmode = bool('testmode' in finding)

    finding_id = finding['Id']
        
    account_id = finding.get('AwsAccountId', '')
    if not re.match('^\\\\\\\\d{12}$', account_id):
        exit(f'ERROR: AwsAccountId is invalid: {account_id}')

    control_id = get_control_id_from_arn(finding['Id'])

    # ControlId present and valid
    if not control_id:
        exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

    # ControlId is the expected value
    if control_id not in expected_control_id:
        exit(f'ERROR: Control Id from input ({control_id}) does not match {str(expected_control_id)}')

    # ProductArn present and valid
    product_arn = finding['ProductArn']
    if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d)::product/aws/securityhub$', product_arn):
        exit(f'ERROR: ProductArn is invalid: {product_arn}')

    resource = finding['Resources'][0]

    # Details
    details = finding['Resources'][0].get('Details', {})

    # Regex match Id to get remediation-specific identifier
    identifier_raw = finding['Resources'][0]['Id']
    resource_id = identifier_raw

    if parse_id_pattern:
        identifier_match = re.match(
            parse_id_pattern,
            identifier_raw
        )

        if identifier_match:
            for group in range(1, len(identifier_match.groups())+1):
                resource_id_matches.append(identifier_match.group(group))
            resource_id = identifier_match.group(event.get('resource_index', 1))
        else:
            exit(f'ERROR: Invalid resource Id {identifier_raw}')   

    if not resource_id:
        exit('ERROR: Resource Id is missing from the finding json Resources (Id)')

    affected_object = {'Type': resource['Type'], 'Id': resource_id, 'OutputKey': 'Remediation.Output'}
    return {
        \\"account_id\\": account_id,
        \\"resource_id\\": resource_id, 
        \\"finding_id\\": finding_id, 
        \\"control_id\\": control_id,
        \\"product_arn\\": product_arn, 
        \\"object\\": affected_object,
        \\"matches\\": resource_id_matches,
        \\"details\\": details,
        \\"testmode\\": testmode,
        \\"resource\\": resource
    }",
              },
              "name": "ParseInput",
              "nextStep": "Remediation",
              "outputs": Array [
                Object {
                  "Name": "DBSnapshotId",
                  "Selector": "$.Payload.resource_id",
                  "Type": "String",
                },
                Object {
                  "Name": "DBSnapshotType",
                  "Selector": "$.Payload.matches[0]",
                  "Type": "String",
                },
                Object {
                  "Name": "FindingId",
                  "Selector": "$.Payload.finding_id",
                  "Type": "String",
                },
                Object {
                  "Name": "ProductArn",
                  "Selector": "$.Payload.product_arn",
                  "Type": "String",
                },
                Object {
                  "Name": "AffectedObject",
                  "Selector": "$.Payload.object",
                  "Type": "StringMap",
                },
                Object {
                  "Name": "Type",
                  "Selector": "$.Payload.type",
                  "Type": "String",
                },
              ],
            },
            Object {
              "action": "aws:executeAutomation",
              "inputs": Object {
                "DocumentName": "SHARR-MakeRDSSnapshotPrivate",
                "RuntimeParameters": Object {
                  "AutomationAssumeRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-MakeRDSSnapshotPrivate",
                  "DBSnapshotId": "{{ParseInput.DBSnapshotId}}",
                  "DBSnapshotType": "{{ParseInput.DBSnapshotType}}",
                },
              },
              "isEnd": false,
              "name": "Remediation",
              "nextStep": "UpdateFinding",
            },
            Object {
              "action": "aws:executeAwsApi",
              "description": "Update finding",
              "inputs": Object {
                "Api": "BatchUpdateFindings",
                "FindingIdentifiers": Array [
                  Object {
                    "Id": "{{ParseInput.FindingId}}",
                    "ProductArn": "{{ParseInput.ProductArn}}",
                  },
                ],
                "Note": Object {
                  "Text": "RDS DB Snapshot modified to private",
                  "UpdatedBy": "SHARR-AFSBP_1.0.0_RDS.1",
                },
                "Service": "securityhub",
                "Workflow": Object {
                  "Status": "RESOLVED",
                },
              },
              "isEnd": true,
              "name": "UpdateFinding",
            },
          ],
          "outputs": Array [
            "Remediation.Output",
            "ParseInput.AffectedObject",
          ],
          "parameters": Object {
            "AutomationAssumeRole": Object {
              "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role/[\\\\w+=,.@-]+",
              "default": "",
              "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
              "type": "String",
            },
            "Finding": Object {
              "description": "The input from Step function for RDS.1 finding",
              "type": "StringMap",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentType": "Automation",
        "Name": "SHARR-AFSBP_1.0.0_RDS.1",
      },
      "Type": "AWS::SSM::Document",
    },
  },
}
`;

exports[`Primary Stack - AFSBP 1`] = `
Object {
  "Description": "test;",
  "Mappings": Object {
    "SourceCode": Object {
      "General": Object {
        "KeyPrefix": "aws-security-hub-automated-response-and-remediation/v1.1.1",
        "S3Bucket": "sharrbukkit",
      },
    },
  },
  "Parameters": Object {
    "AFSBPExample1AutoTrigger": Object {
      "AllowedValues": Array [
        "ENABLED",
        "DISABLED",
      ],
      "Default": "DISABLED",
      "Description": "This will fully enable automated remediation for AFSBP Example.1",
      "Type": "String",
    },
    "AFSBPExample3AutoTrigger": Object {
      "AllowedValues": Array [
        "ENABLED",
        "DISABLED",
      ],
      "Default": "DISABLED",
      "Description": "This will fully enable automated remediation for AFSBP Example.3",
      "Type": "String",
    },
    "AFSBPExample5AutoTrigger": Object {
      "AllowedValues": Array [
        "ENABLED",
        "DISABLED",
      ],
      "Default": "DISABLED",
      "Description": "This will fully enable automated remediation for AFSBP Example.5",
      "Type": "String",
    },
    "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/Solutions/SO0111/OrchestratorArn",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "AFSBPExample1AutoEventRuleC2A31DE2": Object {
      "Properties": Object {
        "Description": "Remediate AFSBP Example.1 automatic remediation trigger event rule.",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
              "GeneratorId": Array [
                "aws-foundational-security-best-practices/v/1.0.0/Example.1",
              ],
              "Workflow": Object {
                "Status": Array [
                  "NEW",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Imported",
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "AFSBP_Example.1_AutoTrigger",
        "State": Object {
          "Ref": "AFSBPExample1AutoTrigger",
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "AFSBPExample1EventsRuleRole2EAEBD38",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AFSBPExample1EventsRuleRole2EAEBD38": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AFSBPExample1EventsRuleRoleDefaultPolicy7C237931": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AFSBPExample1EventsRuleRoleDefaultPolicy7C237931",
        "Roles": Array [
          Object {
            "Ref": "AFSBPExample1EventsRuleRole2EAEBD38",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AFSBPExample3AutoEventRule804387B8": Object {
      "Properties": Object {
        "Description": "Remediate AFSBP Example.3 automatic remediation trigger event rule.",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
              "GeneratorId": Array [
                "aws-foundational-security-best-practices/v/1.0.0/Example.3",
              ],
              "Workflow": Object {
                "Status": Array [
                  "NEW",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Imported",
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "AFSBP_Example.3_AutoTrigger",
        "State": Object {
          "Ref": "AFSBPExample3AutoTrigger",
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "AFSBPExample3EventsRuleRole5956A03B",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AFSBPExample3EventsRuleRole5956A03B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AFSBPExample3EventsRuleRoleDefaultPolicy6964C066": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AFSBPExample3EventsRuleRoleDefaultPolicy6964C066",
        "Roles": Array [
          Object {
            "Ref": "AFSBPExample3EventsRuleRole5956A03B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AFSBPExample5AutoEventRuleD0EDB507": Object {
      "Properties": Object {
        "Description": "Remediate AFSBP Example.5 automatic remediation trigger event rule.",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
              "GeneratorId": Array [
                "aws-foundational-security-best-practices/v/1.0.0/Example.5",
              ],
              "Workflow": Object {
                "Status": Array [
                  "NEW",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Imported",
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "AFSBP_Example.5_AutoTrigger",
        "State": Object {
          "Ref": "AFSBPExample5AutoTrigger",
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "AFSBPExample5EventsRuleRole80D6194D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AFSBPExample5EventsRuleRole80D6194D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AFSBPExample5EventsRuleRoleDefaultPolicy34C14018": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AFSBPExample5EventsRuleRoleDefaultPolicy34C14018",
        "Roles": Array [
          Object {
            "Ref": "AFSBPExample5EventsRuleRole80D6194D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StandardShortName7DDF6BE6": Object {
      "Properties": Object {
        "Description": "Provides a short (1-12) character abbreviation for the standard.",
        "Name": "/Solutions/SO0111/aws-foundational-security-best-practices/shortname",
        "Type": "String",
        "Value": "AFSBP",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "StandardVersionCB2C6951": Object {
      "Properties": Object {
        "Description": "This parameter controls whether the SHARR step function will process findings for this version of the standard.",
        "Name": "/Solutions/SO0111/aws-foundational-security-best-practices/1.0.0/status",
        "Type": "String",
        "Value": "enabled",
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
}
`;
