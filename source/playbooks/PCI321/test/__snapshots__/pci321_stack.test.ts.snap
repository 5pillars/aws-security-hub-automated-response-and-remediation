// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default stack 1`] = `
Object {
  "Description": "test;",
  "Mappings": Object {
    "SourceCode": Object {
      "General": Object {
        "KeyPrefix": "aws-security-hub-automated-response-and-remediation/v1.1.1",
        "S3Bucket": "sharrbukkit",
      },
    },
  },
  "Parameters": Object {
    "PCIPCIAutoScaling1AutoTrigger": Object {
      "AllowedValues": Array [
        "ENABLED",
        "DISABLED",
      ],
      "Default": "DISABLED",
      "Description": "This will fully enable automated remediation for PCI PCI.AutoScaling.1",
      "Type": "String",
    },
    "PCIPCIEC26AutoTrigger": Object {
      "AllowedValues": Array [
        "ENABLED",
        "DISABLED",
      ],
      "Default": "DISABLED",
      "Description": "This will fully enable automated remediation for PCI PCI.EC2.6",
      "Type": "String",
    },
    "PCIPCIIAM8AutoTrigger": Object {
      "AllowedValues": Array [
        "ENABLED",
        "DISABLED",
      ],
      "Default": "DISABLED",
      "Description": "This will fully enable automated remediation for PCI PCI.IAM.8",
      "Type": "String",
    },
    "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/Solutions/SO0111/OrchestratorArn",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "PCIPCIAutoScaling1AutoEventRuleCDFEB9FF": Object {
      "Properties": Object {
        "Description": "Remediate PCI PCI.AutoScaling.1 automatic remediation trigger event rule.",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
              "GeneratorId": Array [
                "pci-dss/v/3.2.1/PCI.AutoScaling.1",
              ],
              "Workflow": Object {
                "Status": Array [
                  "NEW",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Imported",
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "PCI_PCI.AutoScaling.1_AutoTrigger",
        "State": Object {
          "Ref": "PCIPCIAutoScaling1AutoTrigger",
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "PCIPCIAutoScaling1EventsRuleRole3283761D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "PCIPCIAutoScaling1EventsRuleRole3283761D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PCIPCIAutoScaling1EventsRuleRoleDefaultPolicy7F317AE9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PCIPCIAutoScaling1EventsRuleRoleDefaultPolicy7F317AE9",
        "Roles": Array [
          Object {
            "Ref": "PCIPCIAutoScaling1EventsRuleRole3283761D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PCIPCIEC26AutoEventRule084B7A4B": Object {
      "Properties": Object {
        "Description": "Remediate PCI PCI.EC2.6 automatic remediation trigger event rule.",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
              "GeneratorId": Array [
                "pci-dss/v/3.2.1/PCI.EC2.6",
              ],
              "Workflow": Object {
                "Status": Array [
                  "NEW",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Imported",
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "PCI_PCI.EC2.6_AutoTrigger",
        "State": Object {
          "Ref": "PCIPCIEC26AutoTrigger",
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "PCIPCIEC26EventsRuleRole8A61F75E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "PCIPCIEC26EventsRuleRole8A61F75E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PCIPCIEC26EventsRuleRoleDefaultPolicy22C238AF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PCIPCIEC26EventsRuleRoleDefaultPolicy22C238AF",
        "Roles": Array [
          Object {
            "Ref": "PCIPCIEC26EventsRuleRole8A61F75E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PCIPCIIAM8AutoEventRuleD053739F": Object {
      "Properties": Object {
        "Description": "Remediate PCI PCI.IAM.8 automatic remediation trigger event rule.",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
              "GeneratorId": Array [
                "pci-dss/v/3.2.1/PCI.IAM.8",
              ],
              "Workflow": Object {
                "Status": Array [
                  "NEW",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Imported",
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "PCI_PCI.IAM.8_AutoTrigger",
        "State": Object {
          "Ref": "PCIPCIIAM8AutoTrigger",
        },
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "PCIPCIIAM8EventsRuleRoleE8D97921",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "PCIPCIIAM8EventsRuleRoleDefaultPolicy8C6970ED": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SsmParameterValueSolutionsSO0111OrchestratorArnC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PCIPCIIAM8EventsRuleRoleDefaultPolicy8C6970ED",
        "Roles": Array [
          Object {
            "Ref": "PCIPCIIAM8EventsRuleRoleE8D97921",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PCIPCIIAM8EventsRuleRoleE8D97921": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StandardShortName7DDF6BE6": Object {
      "Properties": Object {
        "Description": "Provides a short (1-12) character abbreviation for the standard.",
        "Name": "/Solutions/SO0111/pci-dss/shortname",
        "Type": "String",
        "Value": "PCI",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "StandardVersionCB2C6951": Object {
      "Properties": Object {
        "Description": "This parameter controls whether the SHARR step function will process findings for this version of the standard.",
        "Name": "/Solutions/SO0111/pci-dss/3.2.1/status",
        "Type": "String",
        "Value": "enabled",
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
}
`;

exports[`default stack 2`] = `
Object {
  "Conditions": Object {
    "PCIPCIAutoScaling1EnablePCIAutoScaling1Condition12A40ED8": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "PCIPCIAutoScaling1Active",
        },
        "Available",
      ],
    },
    "PCIPCIEC26EnablePCIEC26Condition32AA9B01": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "PCIPCIEC26Active",
        },
        "Available",
      ],
    },
    "PCIPCIIAM8EnablePCIIAM8Condition9362A373": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "PCIPCIIAM8Active",
        },
        "Available",
      ],
    },
  },
  "Description": "test;",
  "Parameters": Object {
    "PCIPCIAutoScaling1Active": Object {
      "AllowedValues": Array [
        "Available",
        "NOT Available",
      ],
      "Default": "Available",
      "Description": "Enable/disable availability of remediation for PCI version 3.2.1 Control PCI.AutoScaling.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account.",
      "Type": "String",
    },
    "PCIPCIEC26Active": Object {
      "AllowedValues": Array [
        "Available",
        "NOT Available",
      ],
      "Default": "Available",
      "Description": "Enable/disable availability of remediation for PCI version 3.2.1 Control PCI.EC2.6 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account.",
      "Type": "String",
    },
    "PCIPCIIAM8Active": Object {
      "AllowedValues": Array [
        "Available",
        "NOT Available",
      ],
      "Default": "Available",
      "Description": "Enable/disable availability of remediation for PCI version 3.2.1 Control PCI.IAM.8 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account.",
      "Type": "String",
    },
    "SecHubAdminAccount": Object {
      "AllowedPattern": "\\\\d{12}",
      "Description": "Admin account number",
      "Type": "String",
    },
  },
  "Resources": Object {
    "PCIPCIAutoScaling1AutomationDocument6FD68329": Object {
      "Condition": "PCIPCIAutoScaling1EnablePCIAutoScaling1Condition12A40ED8",
      "Properties": Object {
        "Content": Object {
          "assumeRole": "{{ AutomationAssumeRole }}",
          "description": "### Document Name - SHARR-PCI_3.2.1_PCI.AutoScaling.1

## What does this document do?
This document enables ELB healthcheck on a given AutoScaling Group using the [UpdateAutoScalingGroup] API.

## Input Parameters
* Finding: (Required) Security Hub finding details JSON
* HealthCheckGracePeriod: (Optional) Health check grace period when ELB health check is Enabled
Default: 30 seconds
* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

## Output Parameters
* Remediation.Output

## Documentation Links
* [PCI AutoScaling.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html#pcidss-autoscaling-1)
",
          "mainSteps": Array [
            Object {
              "action": "aws:executeScript",
              "inputs": Object {
                "Handler": "parse_event",
                "InputPayload": Object {
                  "Finding": "{{Finding}}",
                  "expected_control_id": "PCI.AutoScaling.1",
                  "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):autoscaling:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\d):\\\\d{12}:autoScalingGroup:(?i:[0-9a-f]{11}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}):autoScalingGroupName/(.*)$",
                },
                "Runtime": "python3.7",
                "Script": "#!/usr/bin/python
###############################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.         #
#                                                                             #
#  Licensed under the Apache License Version 2.0 (the \\"License\\"). You may not #
#  use this file except in compliance with the License. A copy of the License #
#  is located at                                                              #
#                                                                             #
#      http://www.apache.org/licenses/LICENSE-2.0/                            #
#                                                                             #
#  or in the \\"license\\" file accompanying this file. This file is distributed  #
#  on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express #
#  or implied. See the License for the specific language governing permis-    #
#  sions and limitations under the License.                                   #
###############################################################################
import re

def get_control_id_from_arn(finding_id_arn):
    check_finding_id = re.match(
        '^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d):\\\\\\\\d{12}:subscription/pci-dss/v/3\\\\\\\\.2\\\\\\\\.1/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
        finding_id_arn
    )
    if check_finding_id:
        control_id = check_finding_id.group(1)
        return control_id
    else:
        exit(f'ERROR: Finding Id is invalid: {finding_id_arn}')

def parse_event(event, context):
    expected_control_id = event['expected_control_id']
    parse_id_pattern = event['parse_id_pattern']
    resource_id_matches = []
    finding = event['Finding']
    testmode = bool('testmode' in finding)

    finding_id = finding['Id']
        
    account_id = finding.get('AwsAccountId', '')
    if not re.match('^\\\\\\\\d{12}$', account_id):
        exit(f'ERROR: AwsAccountId is invalid: {account_id}')

    control_id = get_control_id_from_arn(finding['Id'])

    # ControlId present and valid
    if not control_id:
        exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

    # ControlId is the expected value
    if control_id not in expected_control_id:
        exit(f'ERROR: Control Id from input ({control_id}) does not match {str(expected_control_id)}')

    # ProductArn present and valid
    product_arn = finding['ProductArn']
    if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d)::product/aws/securityhub$', product_arn):
        exit(f'ERROR: ProductArn is invalid: {product_arn}')

    resource = finding['Resources'][0]

    # Details
    details = finding['Resources'][0].get('Details', {})

    # Regex match Id to get remediation-specific identifier
    identifier_raw = finding['Resources'][0]['Id']
    resource_id = identifier_raw

    if parse_id_pattern:
        identifier_match = re.match(
            parse_id_pattern,
            identifier_raw
        )

        if identifier_match:
            for group in range(1, len(identifier_match.groups())+1):
                resource_id_matches.append(identifier_match.group(group))
            resource_id = identifier_match.group(event.get('resource_index', 1))
        else:
            exit(f'ERROR: Invalid resource Id {identifier_raw}')   

    if not resource_id:
        exit('ERROR: Resource Id is missing from the finding json Resources (Id)')

    affected_object = {'Type': resource['Type'], 'Id': resource_id, 'OutputKey': 'Remediation.Output'}
    return {
        \\"account_id\\": account_id,
        \\"resource_id\\": resource_id, 
        \\"finding_id\\": finding_id, 
        \\"control_id\\": control_id,
        \\"product_arn\\": product_arn, 
        \\"object\\": affected_object,
        \\"matches\\": resource_id_matches,
        \\"details\\": details,
        \\"testmode\\": testmode,
        \\"resource\\": resource
    }",
              },
              "isEnd": false,
              "name": "ParseInput",
              "outputs": Array [
                Object {
                  "Name": "AutoScalingGroupName",
                  "Selector": "$.Payload.resource_id",
                  "Type": "String",
                },
                Object {
                  "Name": "FindingId",
                  "Selector": "$.Payload.finding_id",
                  "Type": "String",
                },
                Object {
                  "Name": "ProductArn",
                  "Selector": "$.Payload.product_arn",
                  "Type": "String",
                },
                Object {
                  "Name": "AffectedObject",
                  "Selector": "$.Payload.object",
                  "Type": "StringMap",
                },
              ],
            },
            Object {
              "action": "aws:executeAutomation",
              "inputs": Object {
                "DocumentName": "SHARR-EnableAutoScalingGroupELBHealthCheck",
                "RuntimeParameters": Object {
                  "AutoScalingGroupName": "{{ParseInput.AutoScalingGroupName}}",
                  "AutomationAssumeRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableAutoScalingGroupELBHealthCheck",
                },
              },
              "isEnd": false,
              "name": "Remediation",
            },
            Object {
              "action": "aws:executeAwsApi",
              "description": "Update finding",
              "inputs": Object {
                "Api": "BatchUpdateFindings",
                "FindingIdentifiers": Array [
                  Object {
                    "Id": "{{ParseInput.FindingId}}",
                    "ProductArn": "{{ParseInput.ProductArn}}",
                  },
                ],
                "Note": Object {
                  "Text": "ASG health check type updated to ELB",
                  "UpdatedBy": "SHARR-PCI_3.2.1_AutoScaling.1",
                },
                "Service": "securityhub",
                "Workflow": Object {
                  "Status": "RESOLVED",
                },
              },
              "isEnd": true,
              "name": "UpdateFinding",
            },
          ],
          "outputs": Array [
            "Remediation.Output",
            "ParseInput.AffectedObject",
          ],
          "parameters": Object {
            "AutomationAssumeRole": Object {
              "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role/[\\\\w+=,.@-]+",
              "default": "",
              "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
              "type": "String",
            },
            "Finding": Object {
              "description": "The input from Step function for ASG1 finding",
              "type": "StringMap",
            },
            "HealthCheckGracePeriod": Object {
              "default": 30,
              "description": "ELB Health Check Grace Period",
              "type": "Integer",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentType": "Automation",
        "Name": "SHARR-PCI_3.2.1_PCI.AutoScaling.1",
      },
      "Type": "AWS::SSM::Document",
    },
    "PCIPCIEC26AutomationDocumentF88E2FFC": Object {
      "Condition": "PCIPCIEC26EnablePCIEC26Condition32AA9B01",
      "Properties": Object {
        "Content": Object {
          "assumeRole": "{{ AutomationAssumeRole }}",
          "description": "### Document Name - SHARR-PCI_3.2.1_PCI.EC2.6

## What does this document do?
Enables VPC Flow Logs for a VPC

## Input Parameters
* Finding: (Required) Security Hub finding details JSON
* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

## Output Parameters
* Remediation.Output - Remediation results

## Documentation Links
* [PCI EC2.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html#pcidss-ec2-6)
",
          "mainSteps": Array [
            Object {
              "action": "aws:executeScript",
              "inputs": Object {
                "Handler": "parse_event",
                "InputPayload": Object {
                  "Finding": "{{Finding}}",
                  "expected_control_id": "PCI.EC2.6",
                  "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):ec2:.*:\\\\d{12}:vpc/(vpc-[0-9a-f]{8,17}$)",
                },
                "Runtime": "python3.7",
                "Script": "#!/usr/bin/python
###############################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.         #
#                                                                             #
#  Licensed under the Apache License Version 2.0 (the \\"License\\"). You may not #
#  use this file except in compliance with the License. A copy of the License #
#  is located at                                                              #
#                                                                             #
#      http://www.apache.org/licenses/LICENSE-2.0/                            #
#                                                                             #
#  or in the \\"license\\" file accompanying this file. This file is distributed  #
#  on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express #
#  or implied. See the License for the specific language governing permis-    #
#  sions and limitations under the License.                                   #
###############################################################################
import re

def get_control_id_from_arn(finding_id_arn):
    check_finding_id = re.match(
        '^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d):\\\\\\\\d{12}:subscription/pci-dss/v/3\\\\\\\\.2\\\\\\\\.1/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
        finding_id_arn
    )
    if check_finding_id:
        control_id = check_finding_id.group(1)
        return control_id
    else:
        exit(f'ERROR: Finding Id is invalid: {finding_id_arn}')

def parse_event(event, context):
    expected_control_id = event['expected_control_id']
    parse_id_pattern = event['parse_id_pattern']
    resource_id_matches = []
    finding = event['Finding']
    testmode = bool('testmode' in finding)

    finding_id = finding['Id']
        
    account_id = finding.get('AwsAccountId', '')
    if not re.match('^\\\\\\\\d{12}$', account_id):
        exit(f'ERROR: AwsAccountId is invalid: {account_id}')

    control_id = get_control_id_from_arn(finding['Id'])

    # ControlId present and valid
    if not control_id:
        exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

    # ControlId is the expected value
    if control_id not in expected_control_id:
        exit(f'ERROR: Control Id from input ({control_id}) does not match {str(expected_control_id)}')

    # ProductArn present and valid
    product_arn = finding['ProductArn']
    if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d)::product/aws/securityhub$', product_arn):
        exit(f'ERROR: ProductArn is invalid: {product_arn}')

    resource = finding['Resources'][0]

    # Details
    details = finding['Resources'][0].get('Details', {})

    # Regex match Id to get remediation-specific identifier
    identifier_raw = finding['Resources'][0]['Id']
    resource_id = identifier_raw

    if parse_id_pattern:
        identifier_match = re.match(
            parse_id_pattern,
            identifier_raw
        )

        if identifier_match:
            for group in range(1, len(identifier_match.groups())+1):
                resource_id_matches.append(identifier_match.group(group))
            resource_id = identifier_match.group(event.get('resource_index', 1))
        else:
            exit(f'ERROR: Invalid resource Id {identifier_raw}')   

    if not resource_id:
        exit('ERROR: Resource Id is missing from the finding json Resources (Id)')

    affected_object = {'Type': resource['Type'], 'Id': resource_id, 'OutputKey': 'Remediation.Output'}
    return {
        \\"account_id\\": account_id,
        \\"resource_id\\": resource_id, 
        \\"finding_id\\": finding_id, 
        \\"control_id\\": control_id,
        \\"product_arn\\": product_arn, 
        \\"object\\": affected_object,
        \\"matches\\": resource_id_matches,
        \\"details\\": details,
        \\"testmode\\": testmode,
        \\"resource\\": resource
    }",
              },
              "isEnd": false,
              "name": "ParseInput",
              "outputs": Array [
                Object {
                  "Name": "VPC",
                  "Selector": "$.Payload.resource_id",
                  "Type": "String",
                },
                Object {
                  "Name": "FindingId",
                  "Selector": "$.Payload.finding_id",
                  "Type": "String",
                },
                Object {
                  "Name": "ProductArn",
                  "Selector": "$.Payload.product_arn",
                  "Type": "String",
                },
                Object {
                  "Name": "AffectedObject",
                  "Selector": "$.Payload.object",
                  "Type": "StringMap",
                },
              ],
            },
            Object {
              "action": "aws:executeAutomation",
              "inputs": Object {
                "DocumentName": "SHARR-EnableVPCFlowLogs",
                "RuntimeParameters": Object {
                  "AutomationAssumeRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableVPCFlowLogs",
                  "RemediationRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableVPCFlowLogs-remediationRole",
                  "VPC": "{{ParseInput.VPC}}",
                },
              },
              "isEnd": false,
              "name": "Remediation",
            },
            Object {
              "action": "aws:executeAwsApi",
              "description": "Update finding",
              "inputs": Object {
                "Api": "BatchUpdateFindings",
                "FindingIdentifiers": Array [
                  Object {
                    "Id": "{{ParseInput.FindingId}}",
                    "ProductArn": "{{ParseInput.ProductArn}}",
                  },
                ],
                "Note": Object {
                  "Text": "Enabled VPC Flow Logs for {{ParseInput.VPC}}",
                  "UpdatedBy": "SHARR-PCI_3.2.1_PCI.EC2.6",
                },
                "Service": "securityhub",
                "Workflow": Object {
                  "Status": "RESOLVED",
                },
              },
              "isEnd": true,
              "name": "UpdateFinding",
            },
          ],
          "outputs": Array [
            "ParseInput.AffectedObject",
            "Remediation.Output",
          ],
          "parameters": Object {
            "AutomationAssumeRole": Object {
              "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role/[\\\\w+=,.@-]+",
              "default": "",
              "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
              "type": "String",
            },
            "Finding": Object {
              "description": "The input from Step function for finding",
              "type": "StringMap",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentType": "Automation",
        "Name": "SHARR-PCI_3.2.1_PCI.EC2.6",
      },
      "Type": "AWS::SSM::Document",
    },
    "PCIPCIIAM8AutomationDocument45FA0101": Object {
      "Condition": "PCIPCIIAM8EnablePCIIAM8Condition9362A373",
      "Properties": Object {
        "Content": Object {
          "assumeRole": "{{ AutomationAssumeRole }}",
          "description": "### Document Name - SHARR-PCI_3.2.1_PCI.IAM.8

## What does this document do?
This document establishes a default password policy.

## Security Standards and Controls
* CIS 1.5 - 1.11
* AFSBP IAM.7
* PCI IAM.8

## Input Parameters
* Finding: (Required) Security Hub finding details JSON
* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
## Output Parameters
* Remediation.Output

## Documentation Links
* [PCI IAM.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html#pcidss-iam-8)
",
          "mainSteps": Array [
            Object {
              "action": "aws:executeScript",
              "inputs": Object {
                "Handler": "parse_event",
                "InputPayload": Object {
                  "Finding": "{{Finding}}",
                  "expected_control_id": Array [
                    "PCI.IAM.8",
                  ],
                  "parse_id_pattern": "",
                },
                "Runtime": "python3.7",
                "Script": "#!/usr/bin/python
###############################################################################
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.         #
#                                                                             #
#  Licensed under the Apache License Version 2.0 (the \\"License\\"). You may not #
#  use this file except in compliance with the License. A copy of the License #
#  is located at                                                              #
#                                                                             #
#      http://www.apache.org/licenses/LICENSE-2.0/                            #
#                                                                             #
#  or in the \\"license\\" file accompanying this file. This file is distributed  #
#  on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express #
#  or implied. See the License for the specific language governing permis-    #
#  sions and limitations under the License.                                   #
###############################################################################
import re

def get_control_id_from_arn(finding_id_arn):
    check_finding_id = re.match(
        '^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d):\\\\\\\\d{12}:subscription/pci-dss/v/3\\\\\\\\.2\\\\\\\\.1/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
        finding_id_arn
    )
    if check_finding_id:
        control_id = check_finding_id.group(1)
        return control_id
    else:
        exit(f'ERROR: Finding Id is invalid: {finding_id_arn}')

def parse_event(event, context):
    expected_control_id = event['expected_control_id']
    parse_id_pattern = event['parse_id_pattern']
    resource_id_matches = []
    finding = event['Finding']
    testmode = bool('testmode' in finding)

    finding_id = finding['Id']
        
    account_id = finding.get('AwsAccountId', '')
    if not re.match('^\\\\\\\\d{12}$', account_id):
        exit(f'ERROR: AwsAccountId is invalid: {account_id}')

    control_id = get_control_id_from_arn(finding['Id'])

    # ControlId present and valid
    if not control_id:
        exit(f'ERROR: Finding Id is invalid: {finding_id} - missing Control Id')

    # ControlId is the expected value
    if control_id not in expected_control_id:
        exit(f'ERROR: Control Id from input ({control_id}) does not match {str(expected_control_id)}')

    # ProductArn present and valid
    product_arn = finding['ProductArn']
    if not re.match('^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\\\\\\\d)::product/aws/securityhub$', product_arn):
        exit(f'ERROR: ProductArn is invalid: {product_arn}')

    resource = finding['Resources'][0]

    # Details
    details = finding['Resources'][0].get('Details', {})

    # Regex match Id to get remediation-specific identifier
    identifier_raw = finding['Resources'][0]['Id']
    resource_id = identifier_raw

    if parse_id_pattern:
        identifier_match = re.match(
            parse_id_pattern,
            identifier_raw
        )

        if identifier_match:
            for group in range(1, len(identifier_match.groups())+1):
                resource_id_matches.append(identifier_match.group(group))
            resource_id = identifier_match.group(event.get('resource_index', 1))
        else:
            exit(f'ERROR: Invalid resource Id {identifier_raw}')   

    if not resource_id:
        exit('ERROR: Resource Id is missing from the finding json Resources (Id)')

    affected_object = {'Type': resource['Type'], 'Id': resource_id, 'OutputKey': 'Remediation.Output'}
    return {
        \\"account_id\\": account_id,
        \\"resource_id\\": resource_id, 
        \\"finding_id\\": finding_id, 
        \\"control_id\\": control_id,
        \\"product_arn\\": product_arn, 
        \\"object\\": affected_object,
        \\"matches\\": resource_id_matches,
        \\"details\\": details,
        \\"testmode\\": testmode,
        \\"resource\\": resource
    }",
              },
              "isEnd": false,
              "name": "ParseInput",
              "outputs": Array [
                Object {
                  "Name": "FindingId",
                  "Selector": "$.Payload.finding_id",
                  "Type": "String",
                },
                Object {
                  "Name": "ProductArn",
                  "Selector": "$.Payload.product_arn",
                  "Type": "String",
                },
                Object {
                  "Name": "AffectedObject",
                  "Selector": "$.Payload.object",
                  "Type": "StringMap",
                },
              ],
            },
            Object {
              "action": "aws:executeAutomation",
              "inputs": Object {
                "DocumentName": "SHARR-SetIAMPasswordPolicy",
                "RuntimeParameters": Object {
                  "AllowUsersToChangePassword": true,
                  "AutomationAssumeRole": "arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-SetIAMPasswordPolicy",
                  "HardExpiry": true,
                  "MaxPasswordAge": 90,
                  "MinimumPasswordLength": 14,
                  "PasswordReusePrevention": 24,
                  "RequireLowercaseCharacters": true,
                  "RequireNumbers": true,
                  "RequireSymbols": true,
                  "RequireUppercaseCharacters": true,
                },
              },
              "isEnd": false,
              "name": "Remediation",
            },
            Object {
              "action": "aws:executeAwsApi",
              "description": "Update finding",
              "inputs": Object {
                "Api": "BatchUpdateFindings",
                "FindingIdentifiers": Array [
                  Object {
                    "Id": "{{ParseInput.FindingId}}",
                    "ProductArn": "{{ParseInput.ProductArn}}",
                  },
                ],
                "Note": Object {
                  "Text": "Established a baseline password policy using the AWSConfigRemediation-SetIAMPasswordPolicy runbook.",
                  "UpdatedBy": "SHARR-PCI_3.2.1_IAM.8",
                },
                "Service": "securityhub",
                "Workflow": Object {
                  "Status": "RESOLVED",
                },
              },
              "isEnd": true,
              "name": "UpdateFinding",
            },
          ],
          "outputs": Array [
            "ParseInput.AffectedObject",
            "Remediation.Output",
          ],
          "parameters": Object {
            "AutomationAssumeRole": Object {
              "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\\\d{12}:role/[\\\\w+=,.@-]+",
              "default": "",
              "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.",
              "type": "String",
            },
            "Finding": Object {
              "description": "The input from Step function for finding",
              "type": "StringMap",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentType": "Automation",
        "Name": "SHARR-PCI_3.2.1_PCI.IAM.8",
      },
      "Type": "AWS::SSM::Document",
    },
  },
}
`;
